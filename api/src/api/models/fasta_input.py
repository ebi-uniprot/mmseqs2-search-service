"""Fasta input blob model."""

import hashlib
import json
from functools import cached_property
from io import StringIO

from Bio import SeqIO
from loguru import logger
from pydantic import BaseModel, field_validator


class FastaBlobModel(BaseModel):
    """Model defining a fasta blob."""

    fasta: str

    @field_validator("fasta", mode="after")
    @classmethod
    def validate_fasta_string(cls, fasta_str: str) -> str:
        """Validate the fasta string by attempting to parse it and checking sequence content.

        This method uses Biopython's SeqIO to parse the provided FASTA string. It checks that:
        - The string contains at least one valid FASTA record.
        - Each sequence is non-empty.
        - Each sequence contains only valid amino acid characters (A-Z, *, -, X).
        If any of these checks fail, a ValueError is raised.

        Args:
            fasta_str (str): The FASTA string to validate.

        Returns:
            str: The original FASTA string if valid.

        Raises:
            ValueError: If the FASTA string is invalid.
        """
        logger.info("Validating fasta string.")
        handle = StringIO(fasta_str)
        records = list(SeqIO.parse(handle, "fasta-pearson"))
        if not records:
            logger.error("No valid FASTA records found.")
            raise ValueError("No valid FASTA records found.")

        for record in records:
            seq = str(record.seq).upper()
            if not seq:
                logger.error("Found empty fasta sequence.")
                raise ValueError("Found empty fasta sequence.")
            invalid = set(seq) - cls.allowed_characters()
            if invalid:
                logger.error(f"Found invalid fasta sequence: {invalid}")
                raise ValueError("Found invalid fasta sequence.")
        return fasta_str

    @classmethod
    def allowed_characters(cls) -> set:
        """Return the set of allowed amino acid characters.

        This includes standard amino acids, as well as common gaps and ambiguities.

        Returns:
            set: A set of allowed characters.
        """
        return set("ABCDEFGHIKLMNOPQRSTUVWXYZ*-X")

    @cached_property
    def job_id(self) -> str:
        """Generate a job id for the fasta content based on its contents.

        The job ID is generated by computing the MD5 hash of the fasta string.

        Returns:
            str: The MD5 hash of the fasta string.
        """
        h = hashlib.md5(self.fasta.encode("utf-8"))
        return h.hexdigest()

    def to_message(self) -> str:
        """Convert to the rabbit mq message.

        Returns:
            str: The message as a JSON string.
        """
        return json.dumps({"job_id": self.job_id, "fasta": self.fasta})
